.decl edge(id:number, x:number, y:number)
.input edge

.decl node(id:number)
.input node

.decl library_flow(edge:number, id:number)
.input library_flow

.decl why_node(node:number)
.input why_node

.decl path(x:number, y:number)
// .output path

.decl  library_flow_on_path_with_lib( start:number, end:number, edge:number, lib:number)
.output library_flow_on_path_with_lib

// node a is on the path x -> y, 
.decl nodes_on_path(query: number, a:number, steps: number)
.output nodes_on_path

.decl why_node_model_answer(node:number, lib:number)
.output why_node_model_answer


path(x, y) :- edge(_, x, y).
path(x, y) :- path(x, z), edge(_, z, y).

library_flow_on_path_with_lib(start, end,  e, lib) :- edge(e, a, b), library_flow(e, lib), path(start, a), path(b, end).
library_flow_on_path_with_lib(start, end,  e, lib) :- edge(e, start, b), library_flow(e, lib), path(b, end).
library_flow_on_path_with_lib(start, end,  e, lib) :- edge(e, a, end), library_flow(e, lib), path(start, a).

why_node_model_answer(node, lib) :- why_node(node), library_flow_on_path_with_lib(_, node,  _, lib).

nodes_on_path(query, start, 0) :- node(start), why_node(query), library_flow_on_path_with_lib(_, query,  libedge, _), edge(libedge, start, _).
nodes_on_path(query, x, steps + 1) :- nodes_on_path(query, a, steps), edge(_, a, x), path(x, target_node), why_node(target_node).


