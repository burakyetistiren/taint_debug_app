.decl edge(id:number, x:number, y:number)
.input edge

.decl node(id:number)
.input node

.decl library_node(edge:number, id:number)
.input library_node

.decl library_flow(edge:number, id:number)
.input library_flow


.decl warning_paths(source:number, sink:number, node:number, step: number, edge:number, prev_node:number, lib: number)
.input warning_paths

.decl common_paths(start1: number, end1: number, start2: number, end2 : number)
.input common_paths

.decl common_paths_answer( lib: number)
.output common_paths_answer

.decl start1(x:number)

.decl end1(x:number)


.decl start2(x:number)

.decl end2(x:number)

.decl nodes_on_path(query_start: number, query_end:number, a:number, steps: number, libnode: number)
.output nodes_on_path

.decl nodes_on_path2(query_start: number, query_end:number, a:number, steps: number, libnode: number)
.output nodes_on_path2

// find common paths 
start1(x) :- common_paths(x, _, _, _).
end1(x) :- common_paths(_, x, _, _).
start2(x) :- common_paths(_, _, x, _).
end2(x) :- common_paths(_, _, _, x).





common_paths_answer(lib) :- start1(s1), end1(e1), start2(s2), end2(e2), warning_paths(s1, e1, _, _, _, _, lib), warning_paths(s2, e2, _, _, _, _, lib), lib != -1.

nodes_on_path(query_start, query_end, node, step, -1) :- common_paths(query_start, query_end, _, _), warning_paths(query_start, query_end, node, step, e, _, _), !library_flow(e, _).
nodes_on_path(query_start, query_end, node, step, lib) :- common_paths(query_start, query_end, _, _), warning_paths(query_start, query_end, node, step, e, _, lib), library_flow(e, _).


nodes_on_path2(query_start, query_end, node, step, -1) :- common_paths(_,_, query_start, query_end), warning_paths(query_start, query_end, node, step, e, _, _), !library_flow(e, _).
nodes_on_path2(query_start, query_end, node, step, lib) :- common_paths(_,_, query_start, query_end), warning_paths(query_start, query_end, node, step, e, _, lib), library_flow(e, _).
