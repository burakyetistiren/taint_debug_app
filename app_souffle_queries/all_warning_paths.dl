
.decl edge(id:number, x:number, y:number)
.input edge

.decl node(id:number)
.input node

.decl library_flow(edge:number, id:number)
.input library_flow


.decl library_node(node:number, lib:number)
.input library_node

.decl positive_path(source:number, sink:number)
.input positive_path

.decl negative_path(source:number, sink:number)
.input negative_path

// .decl source(source_node:number)
// .input source

// .decl sink(sink_node:number)
// .input sink

.decl warning(warning_id:number, source:number, sink:number)
.input warning

.decl tmp_warning_paths(source:number, sink:number, node:number, step: number, edge:number, prev_node:number, lib: number)

.decl warning_paths(source:number, sink:number, node:number, step: number, edge:number, prev_node:number, lib: number)
.output warning_paths

.decl lib_on_warning_path(source:number, sink:number, lib:number, step: number)
.output lib_on_warning_path

// temporary path 
.decl tmp_path(source:number, sink:number, node:number, step:number)
// .output tmp_path

.decl path(x:number, y:number)
.output path

.decl has_cycle(source:number, sink:number, node:number, step:number)
.output has_cycle

.decl library_paths_count(lib: number, cnt: number)
.output library_paths_count

path(x, y) :- edge(_, x, y).
path(x, x) :- node(x).
path(x, y) :- path(x, z), edge(_, z, y).

tmp_path(source_node, sink_node, source_node, 0) :- warning(_, source_node, sink_node).
tmp_path(source_node, sink_node, node2, step+1) :- tmp_path(source_node, sink_node, node1, step),  edge(_, node1, node2), step<20. 

has_cycle(source_node, sink_node, node2, step2) :- tmp_path(source_node, sink_node, node2, step),  tmp_path(source_node, sink_node, node2, step2), step < step2.

tmp_warning_paths(source_node, sink_node, source_node, 0, -1, -1, -1) :- warning(_, source_node, sink_node).
tmp_warning_paths(source_node, sink_node, node2, step+1, edge, node1, lib) :- tmp_warning_paths(source_node, sink_node, node1, step,_, _, _),  edge(edge, node1, node2), path(node2, sink_node), library_node(node2, lib), step<20. 
tmp_warning_paths(source_node, sink_node, node2, step+1, edge, node1, lib) :- tmp_warning_paths(source_node, sink_node, node1, step,_,_, _),  edge(edge, node1, node2), path(node2, sink_node), node2 = sink_node, library_node(node2, lib) , step<20. 
tmp_warning_paths(source_node, sink_node, node2, step+1, edge, node1, -1) :- tmp_warning_paths(source_node, sink_node, node1, step,_, _, _),  edge(edge, node1, node2), path(node2, sink_node), !library_node(node2, _), step<20. 
tmp_warning_paths(source_node, sink_node, node2, step+1, edge, node1, -1) :- tmp_warning_paths(source_node, sink_node, node1, step,_, _,_),  edge(edge, node1, node2), path(node2, sink_node), node2 = sink_node, !library_node(node2, _), step<20. 

warning_paths(source_node, sink_node, node2, step, edge, node1, lib) :- tmp_warning_paths(source_node, sink_node, node2, step, edge, node1, lib), tmp_warning_paths(source_node, sink_node, some_node, _, _, _, _), some_node = sink_node.

lib_on_warning_path(source_node, sink_node, lib, step) :- warning_paths(source_node, sink_node, node, step, _, _, _), library_node(node, lib).

library_paths_count(lib, cnt) :- lib_on_warning_path(_, _, lib, _), cnt = count : { lib_on_warning_path(_, _, lib, _) }.


