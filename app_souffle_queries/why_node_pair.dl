.decl edge(id:number, x:number, y:number)
.input edge

.decl node(id:number)
.input node

.decl library_flow(edge:number, id:number)
.input library_flow

.decl   library_node(node:number, lib:number)
.input library_node

.decl why_node_pair(start:number, end:number)
.input why_node_pair

.decl path(x:number, y:number)
.output path

.decl  library_flow_on_path(end:number, start:number, edge:number)
.output library_flow_on_path

// node a is on the path x -> y, 
.decl nodes_on_path(query_start: number, query_end:number, a:number, steps: number, libnode: number)
.output nodes_on_path

.decl why_node_pair_answer(start:number, end:number, answer_edge:number)
.output why_node_pair_answer


path(x, y) :- edge(_, x, y).
path(x, y) :- path(x, z), edge(_, z, y).

library_flow_on_path(end, start, e) :- edge(e, a, b), library_flow(e, _), path(start, a), path(b, end).

why_node_pair_answer(start, end, y) :- why_node_pair(start, end), library_flow_on_path(end, start, y).

nodes_on_path(query_start, query_end, query_start, 0, -1) :- node(query_start), why_node_pair_answer(query_start, query_end, _), node(query_end), path(query_start, query_end).
nodes_on_path(query_start, query_end, x, steps + 1, -1) :- 
        nodes_on_path(query_start, query_end, a, steps), edge(_, a, x), path(x, query_end), 
        why_node_pair_answer(query_start, query_end, _), !library_node(x, _).
nodes_on_path(query_start, query_end, x, steps + 1, libnode) :- 
        nodes_on_path(query_start, query_end, a, steps), edge(_, a, x), path(x, query_end), 
        why_node_pair_answer(query_start, query_end, _), library_node(x, libnode).


