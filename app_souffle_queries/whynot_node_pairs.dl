.decl edge(id:number, x:number, y:number)
.input edge

.decl node(id:number)
.input node

.decl library_flow(edge:number, id:number)
.input library_flow

.decl   whynot_node_pairs(start:number, end:number)
.input whynot_node_pairs

.decl   library_node(node:number, lib: number)
.input library_node

// .decl path(x:number, y:number)
// .output path

.decl source(node:number)
.input source

.decl sink( node:number)
.input sink



.decl plausible_warning_paths(source:number, sink:number, node:number, step: number, edge:number, prev_node:number, lib: number)
.input plausible_warning_paths

.decl warning_paths(source:number, sink:number, node:number, step: number, edge:number, prev_node:number, lib: number)
.input warning_paths

.decl   whynot_node_pairs_answer(start: number, end: number, node:number)
.output whynot_node_pairs_answer

.decl nodes_on_path(query_start: number, query_end:number, a:number, steps: number, libnode: number)
.output nodes_on_path



// we could compute the answer by diff-ing the plausible_warning_paths and warning_paths
whynot_node_pairs_answer(start, end, y) :- whynot_node_pairs(start, end), plausible_warning_paths(start, end, y, _, _, _, _), !warning_paths(start, end, y, _, _, _, _).

nodes_on_path(query_start, query_end, node, step, -1) :- whynot_node_pairs(query_start, query_end), plausible_warning_paths(query_start, query_end, node, step, _, _, _), !library_flow(_, _).
nodes_on_path(query_start, query_end, node, step, lib) :- whynot_node_pairs(query_start, query_end), plausible_warning_paths(query_start, query_end, node, step, _, _, lib), library_flow(_, _).

// just trace the plausible_warning_paths
// nodes_on_path(query_start, query_end, query_start, 0, -1) :-whynot_node_pairs_answer(query_start, query_end, _, _), plausible_warning_paths(query_start, query_end, query_start, _, _, _).
// nodes_on_path(query_start, query_end, x, steps + 1, -1) :- 
//         nodes_on_path(query_start, query_end, a, steps, _), plausible_edge(_, a, x), plausible_warning_paths(query_start, query_end, x, steps + 1, _, -1).
// nodes_on_path(query_start, query_end, x, steps + 1, lib) :- 
//         nodes_on_path(query_start, query_end, a, steps, _), plausible_edge(e, a, x), plausible_warning_paths(query_start, query_end, x, steps + 1, e, lib).

